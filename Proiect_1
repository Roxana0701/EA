//cerinta


#include<LiquidCrystal.h>
const int RED  =3;
const int BLUE  =4;
const int GREEN =5;
const int Pin=2;
LiquidCrystal LCD(12, 13, 10, 9, 8,7);

void setup()
{
  Serial.begin(9600);
  pinMode(13, OUTPUT);
   pinMode(RED, OUTPUT);
   pinMode(GREEN, OUTPUT);
   pinMode(BLUE, OUTPUT);
  
  LCD.begin(16,2);
  LCD.setCursor(0,0); //timp prelevare in care se acceseaza curtsor
  LCD.print("Distance:"); //scrierea in LCD
  
}

void loop()
{
  long duration,cm;//inches;
  pinMode(Pin,OUTPUT);
  digitalWrite(Pin,LOW);
 
  delayMicroseconds(2);
  digitalWrite(Pin,HIGH);
  delayMicroseconds(5);
  digitalWrite(Pin,LOW);
  
  
  pinMode(Pin,INPUT);
  duration=pulseIn(Pin,HIGH); // timpul necesar pentru a primi impulsul de rÄƒspuns
  
 //inches=microsecondsToInches(duration);
  cm=microsecondsToCentimeters(duration);
   
  if(cm>0 && cm<50)
  {
    digitalWrite(RED,HIGH);
    digitalWrite(GREEN,LOW);
    digitalWrite(BLUE,LOW);
  }
  else if(cm>50 && cm<100)
  {
   
    digitalWrite(RED,HIGH);
    digitalWrite(GREEN,HIGH);
    digitalWrite(BLUE,LOW);
    delay(1000);
  }
  else if(cm>100 && cm<150)
  {
    digitalWrite(RED,HIGH);
    digitalWrite(GREEN,LOW);
    digitalWrite(BLUE,HIGH);
    delay(1000);
  }
   else if(cm>150 && cm<200)
  {
    digitalWrite(RED,LOW);
    digitalWrite(GREEN,HIGH);
    digitalWrite(BLUE,HIGH);
    delay(1000);
  }
   else if(cm>200 && cm<250)
  {
    digitalWrite(RED,LOW);
    digitalWrite(GREEN,LOW);
    digitalWrite(BLUE,HIGH);
    delay(1000);
  }
  else if(cm>250 && cm<350)
  {
    digitalWrite(RED,LOW);
    digitalWrite(GREEN,HIGH);
    digitalWrite(BLUE,LOW);
    delay(1000);
  }
  
  //Serial.print(inches);
  
 // Serial.print("in, ");
  
  Serial.print(cm);
  LCD.setCursor(0,1);
  LCD.print(cm);
  Serial.print("cm");
  LCD.print(" cm");
  Serial.println();
  
  delay(100);
   
  
}
//long microsecondsToInches(long microseconds){
//  return microseconds / 74 / 2;
//}
long microsecondsToCentimeters(long microseconds)
{
  return microseconds / 29/ 2;
}

void showSpectrum()
{
  for(int x=0; x <= 767; x++)
  {
    RGB(x);
    delay(10);
  }
}
void RGB(int color)
{
  int redIntensity;
  int greenIntensity;
  int blueIntensity;
  
  color=constrain(color, 0 ,767);
  
  if(color <= 255)
  {
    redIntensity = 255-color;
    greenIntensity = color;
    blueIntensity = 0;
  }
  else if(color <= 510)
  {
    redIntensity = 0;
    greenIntensity = 511 - color;
    blueIntensity = color - 256;
  }
  else
  {
    redIntensity = color - 512;
    greenIntensity = 0;
    blueIntensity= 767 - color;
  }
  analogWrite(RED,redIntensity);
  analogWrite(GREEN,greenIntensity);
  analogWrite(BLUE,blueIntensity);
}
  
